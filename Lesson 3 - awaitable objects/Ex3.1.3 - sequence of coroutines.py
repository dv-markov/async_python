import asyncio


async def coro(number, seconds):
    print(f"Корутина {number} начала свое выполнение")
    await asyncio.sleep(seconds)
    print(f"Корутина {number} выполнена за {seconds} секунд(ы)")


async def main():
    # Создаем 3 корутины.
    coros = [coro(i, 4 - i) for i in range(1, 4)]
    # coro(1, 3), корутина 1 будет выполнена первой
    await coros[0]
    # coro(2, 2), корутина 2 будет ожидать завершения корутины 1
    await coros[1]
    # coro(3, 1), корутина 3 будет ожидать завершения корутины 2
    await coros[2]


asyncio.run(main())


#  В этом примере каждая корутина coro будет выполнена последовательно несмотря на использование await.
#  Это означает, что task(2, 2) начнет свое выполнение только после того, как task(1, 1) завершится,
#  и task(3, 3) в свою очередь начнет выполнение после завершения task(2, 2).
#  Планирование выполнения и конкурентный запуск для корутин становятся возможны после оборачивания их в объект Task.
#  Об этом будет подробно рассказано в степе Task/Задачи.
