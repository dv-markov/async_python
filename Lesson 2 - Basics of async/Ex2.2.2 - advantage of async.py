import asyncio


async def fetch_data():
    print("Загрузка данных...")
    await asyncio.sleep(2)
    return "Данные загружены"


async def process_data():
    print("Обработка данных...")
    await asyncio.sleep(1)
    return "Данные обработаны"


async def main():
    fetched_data = await fetch_data()
    processed_data = await process_data()
    print(fetched_data, processed_data)


asyncio.run(main())


# Библиотеки
# Twisted
# Это одна из самых старых и мощных библиотек для асинхронного
# программирования на Python. Twisted поддерживает множество протоколов,
# таких как HTTP, DNS, mail, и др. Она также поддерживает асинхронные операции ввода-вывода.
# # Tornado
# Это масштабируемый, асинхронный веб-сервер и библиотека сетевых компонентов.
# Tornado специально разработан для обработки большого количества
# одновременных соединений, он отлично подходит для веб-приложений,
# которым необходима долгоживущая связь с каждым пользователем.
#
# gevent
# Это библиотека для Python, которая предоставляет API для создания сетевых приложений.
# Она использует greenlet - легковесные потоки выполнения - для обработки сетевых операций.
#
# aiohttp
# Это асинхронная библиотека HTTP для Python с поддержкой сервера и клиента.
# Работает на базе asyncio.
#
# Quart
# Это асинхронный веб-фреймворк для Python, аналогичный Flask,
# но с поддержкой async/await. Он позволяет писать асинхронный код с использованием
# Flask-like API.
#
# FastAPI
# Это современный и быстрый (высокопроизводительный) веб-фреймворк
# для построения API с Python 3.6+ на основе стандартов для веб API.
# FastAPI основан на Starlette для веб части и Pydantic для части с данными.
#
#
# Sanic
# Веб-фреймворк Python 3.7+, написанный для быстрого написания
# асинхронных приложений с помощью async и await.
#
# uvloop
# Это быстрая, полностью совместимая реализация цикла событий asyncio на базе libuv.
#
# curio
# Это маленькая библиотека для выполнения одновременных операций
# ввода-вывода с использованием синтаксиса async / await Python.
# Она была разработана с упором на корректность и простоту.
#
# asks
# Это асинхронная HTTP библиотека для Python с очень простым
# и удобным API. Работает на базе asyncio и curio.
#
# httpx
# Это полноценная библиотека HTTP для Python 3,
# которая предоставляет синхронный и асинхронный клиентский API.
#
# trio
# Это библиотека Python для асинхронного ввода-вывода,
# которая призвана упростить написание программ, которые одновременно
# выполняют множество задач и обрабатывают множество соединений.
# Trio использует синтаксис async / await и стремится предоставить
# высокоуровневые абстракции для написания асинхронного кода.

